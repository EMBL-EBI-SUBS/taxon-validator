group 'uk.ac.ebi.subs'
version '0.1.2-SNAPSHOT'

buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.5.2.RELEASE")
        classpath 'org.hidetake:gradle-ssh-plugin:1.1.3'
    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'maven'
apply plugin: 'org.hidetake.ssh'

bootRepackage {
    mainClass = "uk.ac.ebi.subs.validator.taxon.TaxonomyValidatorApplication"
}
springBoot {
    executable = true
}

repositories {
    mavenCentral()
    jcenter()

    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
}

sourceCompatibility = 1.8

dependencies {
    compile ("uk.ac.ebi.subs:validator-common:1.13.1-SNAPSHOT") {
        changing = true
        exclude group: 'org.springframework.boot', module :'spring-boot-starter-data-mongodb'
    }

    compile("org.springframework.boot:spring-boot-starter")
    compile("org.springframework:spring-web")
    compile("com.fasterxml.jackson.core:jackson-databind")

    testCompile("org.springframework.boot:spring-boot-starter-test")
    testCompile("org.mockito:mockito-core:2.+")
}

uploadArchives {
    repositories {
        mavenDeployer {

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2") {
                if (project.hasProperty('ossrhUsername') && project.hasProperty('ossrhPassword')) {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots") {
                if (project.hasProperty('ossrhUsername') && project.hasProperty('ossrhPassword')) {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

            }

            pom.project {
                packaging 'jar'
                url 'https://github.com/EMBL-EBI-SUBS/taxon-validator'

                scm {
                    url 'https://github.com/EMBL-EBI-SUBS/taxon-validator.git'
                }

                licenses {
                    license {
                        name 'The Apache License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id 'subs-internal'
                        name 'EMBL-EBI-SUBS'
                        email 'subs-internal@ebi.ac.uk'
                    }
                }
            }
        }
    }
}

ssh.settings {
    user = 'sub_adm'
}

if (project.hasProperty('sshKeyFile')) {
    ssh.settings.identity = new File(sshKeyFile)
}

if (project.hasProperty('sshPassphrase')) {
    ssh.settings.passphrase = sshPassphrase
}

task printJarName {
    doLast {
        println "$jar.archivePath.name"
    }

}

task printJarFullPath {
    doLast {
        println "$jar.archivePath.absolutePath"
    }
}

remotes {
    staging {
        role('staging')
        host = 'mac-subs-006'
    }
}

task deployJar(type: SshTask, dependsOn: 'assemble') {
    doLast {
        def deployHome = "/data/" + project.name;
        File jarDeployDir = new File(deployHome,"jar")

        ssh.run {
            session(remotes.staging) {
                println "Creating $project.name directory in /data"
                execute "/data/create_dirs.sh $project.name", ignoreError: false
                println "Uploading jar $jar.archivePath.name to $jarDeployDir area on $remote"
                put(jar.archivePath.absolutePath, jarDeployDir.absolutePath)
                println "creating symbolic link to $jar.archiveName"
                def result = execute "ln -s -f $jarDeployDir/$jar.archiveName $jarDeployDir/$jar.baseName" + ".jar", ignoreError: true
                println result

            }
        }
    }
    ssh.settings {
        knownHosts = allowAnyHosts
    }
}
