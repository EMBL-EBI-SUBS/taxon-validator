group 'uk.ac.ebi.subs'
version '1.2.4'

buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.5.10.RELEASE")
        classpath 'org.hidetake:gradle-ssh-plugin:1.1.3'
    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'maven'
apply plugin: 'org.hidetake.ssh'

sourceCompatibility = 1.8

ext.gradle_env = hasProperty('env') ? env : 'dev'

bootRepackage {
    mainClass = "uk.ac.ebi.subs.validator.taxon.TaxonomyValidatorApplication"
}

springBoot {
    executable = true
    buildInfo()
}

repositories {
    mavenCentral()
    jcenter()
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
}

dependencies {
    compile ("uk.ac.ebi.subs:validator-common:2.8.0-SNAPSHOT") {
        exclude group: 'org.springframework.boot', module :'spring-boot-starter-data-mongodb'
    }
    compile("uk.ac.ebi.subs:subs-messaging:0.4.0-SNAPSHOT")
 
    compile("org.springframework.boot:spring-boot-starter")
    compile("org.springframework:spring-web")
    compile("com.fasterxml.jackson.core:jackson-databind")

    compile 'de.codecentric:spring-boot-admin-starter-client:1.5.7'

    compile("de.siegmar:logback-gelf:1.1.0")

    testCompile("org.springframework.boot:spring-boot-starter-test")
    testCompile("org.mockito:mockito-core:2.+")
}

uploadArchives {
    repositories {
        mavenDeployer {

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2") {
                if (project.hasProperty('ossrhUsername') && project.hasProperty('ossrhPassword')) {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots") {
                if (project.hasProperty('ossrhUsername') && project.hasProperty('ossrhPassword')) {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

            }

            pom.project {
                packaging 'jar'
                url 'https://github.com/EMBL-EBI-SUBS/taxon-validator'

                scm {
                    url 'https://github.com/EMBL-EBI-SUBS/taxon-validator.git'
                }

                licenses {
                    license {
                        name 'The Apache License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id 'subs-internal'
                        name 'EMBL-EBI-SUBS'
                        email 'subs-internal@ebi.ac.uk'
                    }
                }
            }
        }
    }
}

ssh.settings {
    user = 'sub_adm'
}

if (project.hasProperty('sshKeyFile')) {
    ssh.settings.identity = new File(sshKeyFile)
}

if (project.hasProperty('sshPassphrase')) {
    ssh.settings.passphrase = sshPassphrase
}

task printJarName {
    doLast {
        println "$jar.archivePath.name"
    }

}

task printJarFullPath {
    doLast {
        println "$jar.archivePath.absolutePath"
    }
}

task('externalCiTest', type: Test) {
    useJUnit {
        excludeCategories 'uk.ac.ebi.subs.validator.taxon.core.config.RabbitMQDependentTest'
    }
    testLogging {
        exceptionFormat = 'full'
    }

    configure(externalCiTest) {
        group = "verification"
        description = 'Run tests appropriate for our external CI environment'
    }
}

def devDeployHostName = hasProperty(project.name + "DevDeployTarget") ? getProperty(project.name + "DevDeployTarget") : 'localhost'
def testDeployHostName = hasProperty(project.name + "TestDeployTarget") ? getProperty(project.name + "TestDeployTarget") : 'localhost'
def prodDeployHostName = hasProperty(project.name + "ProdDeployTarget") ? getProperty(project.name + "ProdDeployTarget") : 'localhost'

remotes {
    submission_dev {
        role('dev')
        host = devDeployHostName
    }
    submission_test {
        role('test')
        host = testDeployHostName
    }
    submission_prod {
        role('prod')
        host = prodDeployHostName
    }
}

task deployJar(type: SshTask, dependsOn: 'assemble') {
    doLast {
        def uploadJarFileName = project.name + "-"  + project.version + "." + System.currentTimeMillis() + ".jar"
        File jarDeployDir = new File("/data/$gradle_env/$project.name/jar",uploadJarFileName)
        sshRun(jarDeployDir)
    }
    ssh.settings {
        knownHosts = allowAnyHosts
    }
}

private Object sshRun(File jarDeployFile) {
    def uploadJarFileName = name + "-"  + version + "." + System.currentTimeMillis() + ".jar"
    File jarDeployDir = jarDeployFile.getParentFile()
    ssh.run {
        session(remotes.role(gradle_env)) {
            execute "/homes/sub_adm/create_dirs.sh $gradle_env $project.name", ignoreError: false
            println "Uploading jar $jar.archivePath.name to $jarDeployDir/$uploadJarFileName  area on $remote"
            put(jar.archivePath.absolutePath, jarDeployFile.absolutePath)
            println "creating symbolic link to $jar.archiveName"
            def result = execute "ln -s -f $jarDeployFile.absolutePath $jarDeployDir/$jar.baseName" + ".jar", ignoreError: true
            println result
            println "updating permissions of $jarDeployDir/$jar.archiveName"
            execute "chmod u+x $jarDeployDir/*", ignoreError: false
        }
    }
}
